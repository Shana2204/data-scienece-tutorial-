import numpy as np
from sklearn.datasets import make_classification
from sklearn.model_selection import train_test_split

def hinge_loss(w, b, X, y, C):
    margins = 1 - y * (np.dot(X, w) + b)
    return 0.5 * np.dot(w, w) + C * np.sum(np.maximum(0, margins))

def compute_gradient(w, b, X, y, C):
    margins = 1 - y * (np.dot(X, w) + b)
    indicator = (margins > 0).astype(float)
    grad_w = w - C * np.dot(X.T, y * indicator)
    grad_b = -C * np.sum(y * indicator)
    return grad_w, grad_b

def train_svm(X, y, C=1.0, lr=0.001, epochs=10000):
    n_features = X.shape[1]
    w = np.zeros(n_features)
    b = 0.0
    for _ in range(epochs):
        grad_w, grad_b = compute_gradient(w, b, X, y, C)
        w -= lr * grad_w
        b -= lr * grad_b
    return w, b

def predict(X, w, b):
    return np.sign(np.dot(X, w) + b)

X, y = make_classification(n_samples=500, n_features=2, n_redundant=0,
                           n_informative=2, n_clusters_per_class=1, random_state=42)
y = 2 * y - 1
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
w, b = train_svm(X_train, y_train, C=1.0, lr=0.001, epochs=10000)
y_pred = predict(X_test, w, b)
accuracy = np.mean(y_pred == y_test)
print("SVM Accuracy:", accuracy)