def apriori(transactions, min_support):
    n = len(transactions)
    item_counts = {}
    for transaction in transactions:
        for item in transaction:
            key = frozenset([item])
            item_counts[key] = item_counts.get(key, 0) + 1
    L1 = {itemset: count for itemset, count in item_counts.items() if count / n >= min_support}
    frequent_itemsets = dict(L1)
    current_L = L1
    k = 2
    while current_L:
        candidates = {}
        current_itemsets = list(current_L.keys())
        for i in range(len(current_itemsets)):
            for j in range(i + 1, len(current_itemsets)):
                candidate = current_itemsets[i] | current_itemsets[j]
                if len(candidate) == k:
                    candidates[candidate] = 0
        for transaction in transactions:
            transaction_set = frozenset(transaction)
            for candidate in candidates:
                if candidate.issubset(transaction_set):
                    candidates[candidate] += 1
        current_L = {itemset: count for itemset, count in candidates.items() if count / n >= min_support}
        frequent_itemsets.update(current_L)
        k += 1
    return frequent_itemsets

transactions = [
    ['milk', 'bread', 'butter'],
    ['bread', 'butter'],
    ['milk', 'bread'],
    ['milk', 'butter'],
    ['bread', 'butter']
]

min_support = 0.6
freq_itemsets = apriori(transactions, min_support)
print("Frequent Itemsets:")
for itemset, count in freq_itemsets.items():
    print(set(itemset), count)